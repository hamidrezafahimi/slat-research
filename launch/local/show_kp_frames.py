# ──────────────────────────────────────────────────────────────────────────────
#  kp_viewer.py
#
#  Simple viewer for key‑points generated by *manual_kp_track_unified.py*.
#  Shows one image at a time with the annotated key‑points.  Advance with
#  the **n** key; quit with **q**.
#
#  Usage
#  -----
#      python kp_viewer.py <image_dir> <keypoints.json>
#
#  Assumptions
#  -----------
#  • <image_dir> contains the same set/ordering of images that were fed to the
#    tracker when the JSON was created.  Perfect filename correspondence is
#    *not* required – we simply sort() the directory listing and match by
#    index 0,1,2,…
#  • The JSON structure is exactly the one written by the tracker:
#        [
#          {"frame": 0, "keypoints": [[id, u, v], …]},
#          {"frame": 1, "keypoints": …},
#          …
#        ]
#
#  Author: ChatGPT‑o3, 2025‑05‑31
# ──────────────────────────────────────────────────────────────────────────────

from __future__ import annotations

import cv2
import json
import os
import sys
from typing import List

FONT        = cv2.FONT_HERSHEY_SIMPLEX
FONT_SCALE  = 0.6
FONT_THICK  = 2
COLOR_GREEN = (0, 255, 0)
COLOR_BLACK = (0,   0, 0)


# ──────────────────────────────────────────────────────────────────────────────
#  Helpers
# ──────────────────────────────────────────────────────────────────────────────

def load_json(json_path: str):
    try:
        with open(json_path, "r") as f:
            return json.load(f)
    except Exception as e:
        print(f"ERROR: could not read JSON – {e}")
        sys.exit(1)


def draw_keypoints(img, kp_list: List[List[int]]):
    """Draw circles + id text in‑place on *img*."""
    for kp_id, u, v in kp_list:
        cv2.circle(img, (int(u), int(v)), 5, COLOR_GREEN, -1)
        cv2.putText(img, str(kp_id), (int(u)+5, int(v)-5), FONT,
                    FONT_SCALE, COLOR_BLACK, FONT_THICK)


# ──────────────────────────────────────────────────────────────────────────────
#  Main
# ──────────────────────────────────────────────────────────────────────────────

def main():
    if len(sys.argv) != 3:
        print("Usage: python kp_viewer.py <image_dir> <keypoints.json>")
        sys.exit(1)

    img_dir   = sys.argv[1]
    json_path = sys.argv[2]

    # — images —
    files = sorted([f for f in os.listdir(img_dir)
                    if f.lower().endswith((".png", ".jpg", ".jpeg"))])
    if not files:
        print("ERROR: no images found in directory.")
        sys.exit(1)

    # — key‑points —
    frames = load_json(json_path)
    if len(frames) != len(files):
        print("[WARN] Image count and JSON frame count differ – proceeding with "
              f"min({len(files)}, {len(frames)}) frames.")
    total = min(len(files), len(frames))

    cv2.namedWindow("Keypoints Viewer", cv2.WINDOW_NORMAL)

    idx = 0
    while idx < total:
        img_path = os.path.join(img_dir, files[idx])
        img = cv2.imread(img_path)
        if img is None:
            print(f"[WARN] Could not read '{img_path}'. Skipping.")
            idx += 1
            continue

        kp_list = frames[idx]["keypoints"]
        draw_keypoints(img, kp_list)

        print(f"Showing frame {idx}/{total-1}  –  '{files[idx]}'   "
              f"({len(kp_list)} kps).  Press 'n' for next, 'q' to quit.")
        cv2.imshow("Keypoints Viewer", img)

        while True:
            k = cv2.waitKey(0) & 0xFF
            if k == ord('n'):
                idx += 1
                break
            elif k == ord('q'):
                cv2.destroyAllWindows()
                sys.exit(0)
            # ignore all other keys

    print("✔  Reached end of sequence – exiting.")
    cv2.destroyAllWindows()


if __name__ == "__main__":
    main()
